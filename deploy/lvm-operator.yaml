# This manifest is autogenerated via `make manifests` command
# Do the modification to the lvm-driver.yaml in directory deploy/yamls/
# and then run `make manifests` command

# This manifest deploys the OpenEBS LVM control plane components,
# with associated CRs & RBAC rules.

# Create the OpenEBS namespace
# This is the default namespace where the LVM driver will create all
# its resources. If we want to change it to use a different namespace
# modify this to create the new namespace and also modify the LVM_NAMESPACE
# env for the LVM Driver's controller and agent deployments.
# please note that this should be changed while initial setup, once LVM Driver
# is deployed with a namespace, we should never modify it as old resources will
# not be available under the new namespace and LVM Driver looks for all the resources
# in the LVM_NAMESPACE namespace passed as an env.

apiVersion: v1
kind: Namespace
metadata:
  name: openebs


##############################################
###########                       ############
###########   LVMVolume CRD       ############
###########                       ############
##############################################

# LVMVolume CRD is autogenerated via `make manifests` command.
# Do the modification in the code and run the `make manifests` command
# to generate the CRD definition

---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.4.0
  creationTimestamp: null
  name: lvmvolumes.local.openebs.io
spec:
  group: local.openebs.io
  names:
    kind: LVMVolume
    listKind: LVMVolumeList
    plural: lvmvolumes
    shortNames:
    - lvmvol
    singular: lvmvolume
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - description: volume group where the volume is created
      jsonPath: .spec.volGroup
      name: VolGroup
      type: string
    - description: Node where the volume is created
      jsonPath: .spec.ownerNodeID
      name: Node
      type: string
    - description: Size of the volume
      jsonPath: .spec.capacity
      name: Size
      type: string
    - description: Status of the volume
      jsonPath: .status.state
      name: Status
      type: string
    - description: Age of the volume
      jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: LVMVolume represents a LVM based volume
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: VolumeInfo defines LVM info
            properties:
              capacity:
                description: Capacity of the volume
                minLength: 1
                type: string
              integrity:
                description: Integrity specifies whether logical volumes should be
                  checked for integrity. If it is set to "yes", then the LVM LocalPV
                  Driver will enable DM integrity for the logical volume
                enum:
                - "yes"
                - "no"
                type: string
              lvcreateoptions:
                description: LvCreateOptions are extra options for creating a volume.
                  Options should be separated by ; e.g. "--vdo;--readahead;auto"
                type: string
              mirrors:
                description: Mirrors specifies the mirror count for a RAID configuration.
                minimum: 0
                type: integer
              nosync:
                description: NoSync enables the `--nosync` option of a RAID volume.
                  If it is set to "yes", then LVM will skip drive sync when creating
                  the mirrors. Defaults to "no"
                enum:
                - "yes"
                - "no"
                type: string
              ownerNodeID:
                description: OwnerNodeID is the Node ID where the volume group is
                  present which is where the volume has been provisioned. OwnerNodeID
                  can not be edited after the volume has been provisioned.
                minLength: 1
                type: string
              raidtype:
                description: RaidType specifies the type of RAID for the logical volume.
                  Defaults to linear, if unspecified.
                enum:
                - linear
                - raid0
                - raid1
                - raid5
                - raid6
                - raid10
                type: string
              shared:
                description: Shared specifies whether the volume can be shared among
                  multiple pods. If it is not set to "yes", then the LVM LocalPV Driver
                  will not allow the volumes to be mounted by more than one pods.
                enum:
                - "yes"
                - "no"
                type: string
              stripecount:
                description: StripeCount specifies the stripe count for a RAID configuration.
                  This is equal to the number of physical volumes to scatter the logical
                  volume
                minimum: 0
                type: integer
              stripesize:
                description: StripeSize specifies the size of a stripe for a RAID
                  configuration. Must be a power of 2 but must not exceed the physical
                  extent size
                minimum: 0
                type: integer
              thinProvision:
                description: ThinProvision specifies whether logical volumes can be
                  thinly provisioned. If it is set to "yes", then the LVM LocalPV
                  Driver will create thinProvision i.e. logical volumes that are larger
                  than the available extents.
                enum:
                - "yes"
                - "no"
                type: string
              vgPattern:
                description: VgPattern specifies the regex to choose volume groups
                  where volume needs to be created.
                type: string
              volGroup:
                description: VolGroup specifies the name of the volume group where
                  the volume has been created.
                type: string
            required:
            - capacity
            - ownerNodeID
            - raidtype
            - vgPattern
            - volGroup
            type: object
          status:
            description: VolStatus string that specifies the current state of the
              volume provisioning request.
            properties:
              error:
                description: Error denotes the error occurred during provisioning/expanding
                  a volume. Error field should only be set when State becomes Failed.
                properties:
                  code:
                    description: VolumeErrorCode represents the error code to represent
                      specific class of errors.
                    type: string
                  message:
                    type: string
                type: object
              state:
                description: State specifies the current state of the volume provisioning
                  request. The state "Pending" means that the volume creation request
                  has not processed yet. The state "Ready" means that the volume has
                  been created and it is ready for the use. "Failed" means that volume
                  provisioning has been failed and will not be retried by node agent
                  controller.
                enum:
                - Pending
                - Ready
                - Failed
                type: string
            type: object
        required:
        - spec
        type: object
    served: true
    storage: true
    subresources: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []


##############################################
###########                       ############
###########   LVMSnapshot CRD     ############
###########                       ############
##############################################

# LVMSnapshot CRD is autogenerated via `make manifests` command.
# Do the modification in the code and run the `make manifests` command
# to generate the CRD definition

---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.4.0
  creationTimestamp: null
  name: lvmsnapshots.local.openebs.io
spec:
  group: local.openebs.io
  names:
    kind: LVMSnapshot
    listKind: LVMSnapshotList
    plural: lvmsnapshots
    singular: lvmsnapshot
  scope: Namespaced
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        description: LVMSnapshot represents an LVM Snapshot of the lvm volume
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: LVMSnapshotSpec defines LVMSnapshot spec
            properties:
              ownerNodeID:
                description: OwnerNodeID is the Node ID where the volume group is
                  present which is where the snapshot has been provisioned. OwnerNodeID
                  can not be edited after the snapshot has been provisioned.
                minLength: 1
                type: string
              snapSize:
                description: SnapSize specifies the space reserved for the snapshot
                type: string
              volGroup:
                description: VolGroup specifies the name of the volume group where
                  the snapshot has been created.
                type: string
            required:
            - ownerNodeID
            - volGroup
            type: object
          status:
            description: SnapStatus string that reflects if the snapshot was created
              successfully
            properties:
              state:
                type: string
            type: object
        required:
        - spec
        - status
        type: object
    served: true
    storage: true
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []


##############################################
###########                       ############
###########     LVMNode CRD       ############
###########                       ############
##############################################

# LVMNode CRD is autogenerated via `make manifests` command.
# Do the modification in the code and run the `make manifests` command
# to generate the CRD definition

---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.4.0
  creationTimestamp: null
  name: lvmnodes.local.openebs.io
spec:
  group: local.openebs.io
  names:
    kind: LVMNode
    listKind: LVMNodeList
    plural: lvmnodes
    shortNames:
    - lvmnode
    singular: lvmnode
  scope: Namespaced
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        description: LVMNode records information about all lvm volume groups available
          in a node. In general, the openebs node-agent creates the LVMNode object
          & periodically synchronizing the volume groups available in the node. LVMNode
          has an owner reference pointing to the corresponding node object.
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          volumeGroups:
            items:
              description: VolumeGroup specifies attributes of a given vg exists on
                node.
              properties:
                allocationPolicy:
                  description: 'AllocationPolicy indicates the volume group allocation
                    policy. AllocationPolicy has the following mapping between int
                    and string for its value: [-1: "", 0: "normal", 1: "contiguous",
                    2: "cling", 3: "anywhere", 4: "inherited"]'
                  type: integer
                free:
                  anyOf:
                  - type: integer
                  - type: string
                  description: Free specifies the available capacity of volume group.
                  pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                  x-kubernetes-int-or-string: true
                lvCount:
                  description: LVCount denotes total number of logical volumes in
                    volume group.
                  format: int32
                  minimum: 0
                  type: integer
                maxLv:
                  description: MaxLV denotes maximum number of logical volumes allowed
                    in volume group or 0 if unlimited.
                  format: int32
                  type: integer
                maxPv:
                  description: MaxPV denotes maximum number of physical volumes allowed
                    in volume group or 0 if unlimited.
                  format: int32
                  type: integer
                metadataCount:
                  description: MetadataCount denotes number of metadata areas on the
                    volume group.
                  format: int32
                  type: integer
                metadataFree:
                  anyOf:
                  - type: integer
                  - type: string
                  description: MetadataFree specifies the available metadata area
                    space for the volume group
                  pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                  x-kubernetes-int-or-string: true
                metadataSize:
                  anyOf:
                  - type: integer
                  - type: string
                  description: MetadataSize specifies size of smallest metadata area
                    for the volume group
                  pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                  x-kubernetes-int-or-string: true
                metadataUsedCount:
                  description: MetadataUsedCount denotes number of used metadata areas
                    in volume group
                  format: int32
                  type: integer
                missingPvCount:
                  description: MissingPVCount denotes number of physical volumes in
                    volume group which are missing.
                  format: int32
                  type: integer
                name:
                  description: Name of the lvm volume group.
                  minLength: 1
                  type: string
                permissions:
                  description: 'Permission indicates the volume group permission which
                    can be writable or read-only. Permission has the following mapping
                    between int and string for its value: [-1: "", 0: "writeable",
                    1: "read-only"]'
                  type: integer
                pvCount:
                  description: PVCount denotes total number of physical volumes constituting
                    the volume group.
                  format: int32
                  minimum: 0
                  type: integer
                size:
                  anyOf:
                  - type: integer
                  - type: string
                  description: Size specifies the total size of volume group.
                  pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                  x-kubernetes-int-or-string: true
                snapCount:
                  description: SnapCount denotes number of snapshots in volume group.
                  format: int32
                  type: integer
                uuid:
                  description: UUID denotes a unique identity of a lvm volume group.
                  minLength: 1
                  type: string
              required:
              - allocationPolicy
              - free
              - lvCount
              - maxLv
              - maxPv
              - metadataCount
              - metadataFree
              - metadataSize
              - metadataUsedCount
              - missingPvCount
              - name
              - permissions
              - pvCount
              - size
              - snapCount
              - uuid
              type: object
            type: array
        required:
        - volumeGroups
        type: object
    served: true
    storage: true
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []

---

# Create the CSI Driver object
apiVersion: storage.k8s.io/v1
kind: CSIDriver
metadata:
  name: local.csi.openebs.io
spec:
  # do not require volumeattachment
  attachRequired: false
  podInfoOnMount: true
  storageCapacity: true
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.11.3
    api-approved.kubernetes.io: "https://github.com/kubernetes-csi/external-snapshotter/pull/814"
  creationTimestamp: null
  name: volumesnapshotclasses.snapshot.storage.k8s.io
spec:
  group: snapshot.storage.k8s.io
  names:
    kind: VolumeSnapshotClass
    listKind: VolumeSnapshotClassList
    plural: volumesnapshotclasses
    shortNames:
      - vsclass
      - vsclasses
    singular: volumesnapshotclass
  scope: Cluster
  versions:
    - additionalPrinterColumns:
        - jsonPath: .driver
          name: Driver
          type: string
        - description: Determines whether a VolumeSnapshotContent created through the
            VolumeSnapshotClass should be deleted when its bound VolumeSnapshot is deleted.
          jsonPath: .deletionPolicy
          name: DeletionPolicy
          type: string
        - jsonPath: .metadata.creationTimestamp
          name: Age
          type: date
      name: v1
      schema:
        openAPIV3Schema:
          description: VolumeSnapshotClass specifies parameters that a underlying storage
            system uses when creating a volume snapshot. A specific VolumeSnapshotClass
            is used by specifying its name in a VolumeSnapshot object. VolumeSnapshotClasses
            are non-namespaced
          properties:
            apiVersion:
              description: 'APIVersion defines the versioned schema of this representation
                of an object. Servers should convert recognized schemas to the latest
                internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
              type: string
            deletionPolicy:
              description: deletionPolicy determines whether a VolumeSnapshotContent
                created through the VolumeSnapshotClass should be deleted when its bound
                VolumeSnapshot is deleted. Supported values are "Retain" and "Delete".
                "Retain" means that the VolumeSnapshotContent and its physical snapshot
                on underlying storage system are kept. "Delete" means that the VolumeSnapshotContent
                and its physical snapshot on underlying storage system are deleted.
                Required.
              enum:
                - Delete
                - Retain
              type: string
            driver:
              description: driver is the name of the storage driver that handles this
                VolumeSnapshotClass. Required.
              type: string
            kind:
              description: 'Kind is a string value representing the REST resource this
                object represents. Servers may infer this from the endpoint the client
                submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
              type: string
            parameters:
              additionalProperties:
                type: string
              description: parameters is a key-value map with storage driver specific
                parameters for creating snapshots. These values are opaque to Kubernetes.
              type: object
          required:
            - deletionPolicy
            - driver
          type: object
      served: true
      storage: true
      subresources: {}
    - additionalPrinterColumns:
        - jsonPath: .driver
          name: Driver
          type: string
        - description: Determines whether a VolumeSnapshotContent created through the VolumeSnapshotClass should be deleted when its bound VolumeSnapshot is deleted.
          jsonPath: .deletionPolicy
          name: DeletionPolicy
          type: string
        - jsonPath: .metadata.creationTimestamp
          name: Age
          type: date
      name: v1beta1
      # This indicates the v1beta1 version of the custom resource is deprecated.
      # API requests to this version receive a warning in the server response.
      deprecated: true
      # This overrides the default warning returned to clients making v1beta1 API requests.
      deprecationWarning: "snapshot.storage.k8s.io/v1beta1 VolumeSnapshotClass is deprecated; use snapshot.storage.k8s.io/v1 VolumeSnapshotClass"
      schema:
        openAPIV3Schema:
          description: VolumeSnapshotClass specifies parameters that a underlying storage system uses when creating a volume snapshot. A specific VolumeSnapshotClass is used by specifying its name in a VolumeSnapshot object. VolumeSnapshotClasses are non-namespaced
          properties:
            apiVersion:
              description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
              type: string
            deletionPolicy:
              description: deletionPolicy determines whether a VolumeSnapshotContent created through the VolumeSnapshotClass should be deleted when its bound VolumeSnapshot is deleted. Supported values are "Retain" and "Delete". "Retain" means that the VolumeSnapshotContent and its physical snapshot on underlying storage system are kept. "Delete" means that the VolumeSnapshotContent and its physical snapshot on underlying storage system are deleted. Required.
              enum:
                - Delete
                - Retain
              type: string
            driver:
              description: driver is the name of the storage driver that handles this VolumeSnapshotClass. Required.
              type: string
            kind:
              description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
              type: string
            parameters:
              additionalProperties:
                type: string
              description: parameters is a key-value map with storage driver specific parameters for creating snapshots. These values are opaque to Kubernetes.
              type: object
          required:
            - deletionPolicy
            - driver
          type: object
      served: false
      storage: false
      subresources: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.11.3
    api-approved.kubernetes.io: "https://github.com/kubernetes-csi/external-snapshotter/pull/814"
  creationTimestamp: null
  name: volumesnapshotcontents.snapshot.storage.k8s.io
spec:
  group: snapshot.storage.k8s.io
  names:
    kind: VolumeSnapshotContent
    listKind: VolumeSnapshotContentList
    plural: volumesnapshotcontents
    shortNames:
      - vsc
      - vscs
    singular: volumesnapshotcontent
  scope: Cluster
  versions:
    - additionalPrinterColumns:
        - description: Indicates if the snapshot is ready to be used to restore a volume.
          jsonPath: .status.readyToUse
          name: ReadyToUse
          type: boolean
        - description: Represents the complete size of the snapshot in bytes
          jsonPath: .status.restoreSize
          name: RestoreSize
          type: integer
        - description: Determines whether this VolumeSnapshotContent and its physical
            snapshot on the underlying storage system should be deleted when its bound
            VolumeSnapshot is deleted.
          jsonPath: .spec.deletionPolicy
          name: DeletionPolicy
          type: string
        - description: Name of the CSI driver used to create the physical snapshot on
            the underlying storage system.
          jsonPath: .spec.driver
          name: Driver
          type: string
        - description: Name of the VolumeSnapshotClass to which this snapshot belongs.
          jsonPath: .spec.volumeSnapshotClassName
          name: VolumeSnapshotClass
          type: string
        - description: Name of the VolumeSnapshot object to which this VolumeSnapshotContent
            object is bound.
          jsonPath: .spec.volumeSnapshotRef.name
          name: VolumeSnapshot
          type: string
        - description: Namespace of the VolumeSnapshot object to which this VolumeSnapshotContent object is bound.
          jsonPath: .spec.volumeSnapshotRef.namespace
          name: VolumeSnapshotNamespace
          type: string
        - jsonPath: .metadata.creationTimestamp
          name: Age
          type: date
      name: v1
      schema:
        openAPIV3Schema:
          description: VolumeSnapshotContent represents the actual "on-disk" snapshot
            object in the underlying storage system
          properties:
            apiVersion:
              description: 'APIVersion defines the versioned schema of this representation
                of an object. Servers should convert recognized schemas to the latest
                internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
              type: string
            kind:
              description: 'Kind is a string value representing the REST resource this
                object represents. Servers may infer this from the endpoint the client
                submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
              type: string
            spec:
              description: spec defines properties of a VolumeSnapshotContent created
                by the underlying storage system. Required.
              properties:
                deletionPolicy:
                  description: deletionPolicy determines whether this VolumeSnapshotContent
                    and its physical snapshot on the underlying storage system should
                    be deleted when its bound VolumeSnapshot is deleted. Supported values
                    are "Retain" and "Delete". "Retain" means that the VolumeSnapshotContent
                    and its physical snapshot on underlying storage system are kept.
                    "Delete" means that the VolumeSnapshotContent and its physical snapshot
                    on underlying storage system are deleted. For dynamically provisioned
                    snapshots, this field will automatically be filled in by the CSI
                    snapshotter sidecar with the "DeletionPolicy" field defined in the
                    corresponding VolumeSnapshotClass. For pre-existing snapshots, users
                    MUST specify this field when creating the VolumeSnapshotContent
                    object. Required.
                  enum:
                    - Delete
                    - Retain
                  type: string
                driver:
                  description: driver is the name of the CSI driver used to create the
                    physical snapshot on the underlying storage system. This MUST be
                    the same as the name returned by the CSI GetPluginName() call for
                    that driver. Required.
                  type: string
                source:
                  description: source specifies whether the snapshot is (or should be)
                    dynamically provisioned or already exists, and just requires a Kubernetes
                    object representation. This field is immutable after creation. Required.
                  properties:
                    snapshotHandle:
                      description: snapshotHandle specifies the CSI "snapshot_id" of
                        a pre-existing snapshot on the underlying storage system for
                        which a Kubernetes object representation was (or should be)
                        created. This field is immutable.
                      type: string
                    volumeHandle:
                      description: volumeHandle specifies the CSI "volume_id" of the
                        volume from which a snapshot should be dynamically taken from.
                        This field is immutable.
                      type: string
                  type: object
                  oneOf:
                    - required: ["snapshotHandle"]
                    - required: ["volumeHandle"]
                sourceVolumeMode:
                  description: SourceVolumeMode is the mode of the volume whose snapshot
                    is taken. Can be either “Filesystem” or “Block”. If not specified,
                    it indicates the source volume's mode is unknown. This field is
                    immutable. This field is an alpha field.
                  type: string
                volumeSnapshotClassName:
                  description: name of the VolumeSnapshotClass from which this snapshot
                    was (or will be) created. Note that after provisioning, the VolumeSnapshotClass
                    may be deleted or recreated with different set of values, and as
                    such, should not be referenced post-snapshot creation.
                  type: string
                volumeSnapshotRef:
                  description: volumeSnapshotRef specifies the VolumeSnapshot object
                    to which this VolumeSnapshotContent object is bound. VolumeSnapshot.Spec.VolumeSnapshotContentName
                    field must reference to this VolumeSnapshotContent's name for the
                    bidirectional binding to be valid. For a pre-existing VolumeSnapshotContent
                    object, name and namespace of the VolumeSnapshot object MUST be
                    provided for binding to happen. This field is immutable after creation.
                    Required.
                  properties:
                    apiVersion:
                      description: API version of the referent.
                      type: string
                    fieldPath:
                      description: 'If referring to a piece of an object instead of
                        an entire object, this string should contain a valid JSON/Go
                        field access statement, such as desiredState.manifest.containers[2].
                        For example, if the object reference is to a container within
                        a pod, this would take on a value like: "spec.containers{name}"
                        (where "name" refers to the name of the container that triggered
                        the event) or if no container name is specified "spec.containers[2]"
                        (container with index 2 in this pod). This syntax is chosen
                        only to have some well-defined way of referencing a part of
                        an object. TODO: this design is not final and this field is
                        subject to change in the future.'
                      type: string
                    kind:
                      description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                      type: string
                    name:
                      description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                      type: string
                    namespace:
                      description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                      type: string
                    resourceVersion:
                      description: 'Specific resourceVersion to which this reference
                      is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                      type: string
                    uid:
                      description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                      type: string
                  type: object
                  x-kubernetes-map-type: atomic
              required:
                - deletionPolicy
                - driver
                - source
                - volumeSnapshotRef
              type: object
            status:
              description: status represents the current information of a snapshot.
              properties:
                creationTime:
                  description: creationTime is the timestamp when the point-in-time
                    snapshot is taken by the underlying storage system. In dynamic snapshot
                    creation case, this field will be filled in by the CSI snapshotter
                    sidecar with the "creation_time" value returned from CSI "CreateSnapshot"
                    gRPC call. For a pre-existing snapshot, this field will be filled
                    with the "creation_time" value returned from the CSI "ListSnapshots"
                    gRPC call if the driver supports it. If not specified, it indicates
                    the creation time is unknown. The format of this field is a Unix
                    nanoseconds time encoded as an int64. On Unix, the command `date
                    +%s%N` returns the current time in nanoseconds since 1970-01-01
                    00:00:00 UTC.
                  format: int64
                  type: integer
                error:
                  description: error is the last observed error during snapshot creation,
                    if any. Upon success after retry, this error field will be cleared.
                  properties:
                    message:
                      description: 'message is a string detailing the encountered error
                        during snapshot creation if specified. NOTE: message may be
                        logged, and it should not contain sensitive information.'
                      type: string
                    time:
                      description: time is the timestamp when the error was encountered.
                      format: date-time
                      type: string
                  type: object
                readyToUse:
                  description: readyToUse indicates if a snapshot is ready to be used
                    to restore a volume. In dynamic snapshot creation case, this field
                    will be filled in by the CSI snapshotter sidecar with the "ready_to_use"
                    value returned from CSI "CreateSnapshot" gRPC call. For a pre-existing
                    snapshot, this field will be filled with the "ready_to_use" value
                    returned from the CSI "ListSnapshots" gRPC call if the driver supports
                    it, otherwise, this field will be set to "True". If not specified,
                    it means the readiness of a snapshot is unknown.
                  type: boolean
                restoreSize:
                  description: restoreSize represents the complete size of the snapshot
                    in bytes. In dynamic snapshot creation case, this field will be
                    filled in by the CSI snapshotter sidecar with the "size_bytes" value
                    returned from CSI "CreateSnapshot" gRPC call. For a pre-existing
                    snapshot, this field will be filled with the "size_bytes" value
                    returned from the CSI "ListSnapshots" gRPC call if the driver supports
                    it. When restoring a volume from this snapshot, the size of the
                    volume MUST NOT be smaller than the restoreSize if it is specified,
                    otherwise the restoration will fail. If not specified, it indicates
                    that the size is unknown.
                  format: int64
                  minimum: 0
                  type: integer
                snapshotHandle:
                  description: snapshotHandle is the CSI "snapshot_id" of a snapshot
                    on the underlying storage system. If not specified, it indicates
                    that dynamic snapshot creation has either failed or it is still
                    in progress.
                  type: string
                volumeGroupSnapshotContentName:
                  description: VolumeGroupSnapshotContentName is the name of the VolumeGroupSnapshotContent
                    of which this VolumeSnapshotContent is a part of.
                  type: string
              type: object
          required:
            - spec
          type: object
      served: true
      storage: true
      subresources:
        status: {}
    - additionalPrinterColumns:
        - description: Indicates if the snapshot is ready to be used to restore a volume.
          jsonPath: .status.readyToUse
          name: ReadyToUse
          type: boolean
        - description: Represents the complete size of the snapshot in bytes
          jsonPath: .status.restoreSize
          name: RestoreSize
          type: integer
        - description: Determines whether this VolumeSnapshotContent and its physical snapshot on the underlying storage system should be deleted when its bound VolumeSnapshot is deleted.
          jsonPath: .spec.deletionPolicy
          name: DeletionPolicy
          type: string
        - description: Name of the CSI driver used to create the physical snapshot on the underlying storage system.
          jsonPath: .spec.driver
          name: Driver
          type: string
        - description: Name of the VolumeSnapshotClass to which this snapshot belongs.
          jsonPath: .spec.volumeSnapshotClassName
          name: VolumeSnapshotClass
          type: string
        - description: Name of the VolumeSnapshot object to which this VolumeSnapshotContent object is bound.
          jsonPath: .spec.volumeSnapshotRef.name
          name: VolumeSnapshot
          type: string
        - description: Namespace of the VolumeSnapshot object to which this VolumeSnapshotContent object is bound.
          jsonPath: .spec.volumeSnapshotRef.namespace
          name: VolumeSnapshotNamespace
          type: string
        - jsonPath: .metadata.creationTimestamp
          name: Age
          type: date
      name: v1beta1
      # This indicates the v1beta1 version of the custom resource is deprecated.
      # API requests to this version receive a warning in the server response.
      deprecated: true
      # This overrides the default warning returned to clients making v1beta1 API requests.
      deprecationWarning: "snapshot.storage.k8s.io/v1beta1 VolumeSnapshotContent is deprecated; use snapshot.storage.k8s.io/v1 VolumeSnapshotContent"
      schema:
        openAPIV3Schema:
          description: VolumeSnapshotContent represents the actual "on-disk" snapshot object in the underlying storage system
          properties:
            apiVersion:
              description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
              type: string
            kind:
              description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
              type: string
            spec:
              description: spec defines properties of a VolumeSnapshotContent created by the underlying storage system. Required.
              properties:
                deletionPolicy:
                  description: deletionPolicy determines whether this VolumeSnapshotContent and its physical snapshot on the underlying storage system should be deleted when its bound VolumeSnapshot is deleted. Supported values are "Retain" and "Delete". "Retain" means that the VolumeSnapshotContent and its physical snapshot on underlying storage system are kept. "Delete" means that the VolumeSnapshotContent and its physical snapshot on underlying storage system are deleted. For dynamically provisioned snapshots, this field will automatically be filled in by the CSI snapshotter sidecar with the "DeletionPolicy" field defined in the corresponding VolumeSnapshotClass. For pre-existing snapshots, users MUST specify this field when creating the  VolumeSnapshotContent object. Required.
                  enum:
                    - Delete
                    - Retain
                  type: string
                driver:
                  description: driver is the name of the CSI driver used to create the physical snapshot on the underlying storage system. This MUST be the same as the name returned by the CSI GetPluginName() call for that driver. Required.
                  type: string
                source:
                  description: source specifies whether the snapshot is (or should be) dynamically provisioned or already exists, and just requires a Kubernetes object representation. This field is immutable after creation. Required.
                  properties:
                    snapshotHandle:
                      description: snapshotHandle specifies the CSI "snapshot_id" of a pre-existing snapshot on the underlying storage system for which a Kubernetes object representation was (or should be) created. This field is immutable.
                      type: string
                    volumeHandle:
                      description: volumeHandle specifies the CSI "volume_id" of the volume from which a snapshot should be dynamically taken from. This field is immutable.
                      type: string
                  type: object
                volumeSnapshotClassName:
                  description: name of the VolumeSnapshotClass from which this snapshot was (or will be) created. Note that after provisioning, the VolumeSnapshotClass may be deleted or recreated with different set of values, and as such, should not be referenced post-snapshot creation.
                  type: string
                volumeSnapshotRef:
                  description: volumeSnapshotRef specifies the VolumeSnapshot object to which this VolumeSnapshotContent object is bound. VolumeSnapshot.Spec.VolumeSnapshotContentName field must reference to this VolumeSnapshotContent's name for the bidirectional binding to be valid. For a pre-existing VolumeSnapshotContent object, name and namespace of the VolumeSnapshot object MUST be provided for binding to happen. This field is immutable after creation. Required.
                  properties:
                    apiVersion:
                      description: API version of the referent.
                      type: string
                    fieldPath:
                      description: 'If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.'
                      type: string
                    kind:
                      description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                      type: string
                    name:
                      description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                      type: string
                    namespace:
                      description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                      type: string
                    resourceVersion:
                      description: 'Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                      type: string
                    uid:
                      description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                      type: string
                  type: object
              required:
                - deletionPolicy
                - driver
                - source
                - volumeSnapshotRef
              type: object
            status:
              description: status represents the current information of a snapshot.
              properties:
                creationTime:
                  description: creationTime is the timestamp when the point-in-time snapshot is taken by the underlying storage system. In dynamic snapshot creation case, this field will be filled in by the CSI snapshotter sidecar with the "creation_time" value returned from CSI "CreateSnapshot" gRPC call. For a pre-existing snapshot, this field will be filled with the "creation_time" value returned from the CSI "ListSnapshots" gRPC call if the driver supports it. If not specified, it indicates the creation time is unknown. The format of this field is a Unix nanoseconds time encoded as an int64. On Unix, the command `date +%s%N` returns the current time in nanoseconds since 1970-01-01 00:00:00 UTC.
                  format: int64
                  type: integer
                error:
                  description: error is the last observed error during snapshot creation, if any. Upon success after retry, this error field will be cleared.
                  properties:
                    message:
                      description: 'message is a string detailing the encountered error during snapshot creation if specified. NOTE: message may be logged, and it should not contain sensitive information.'
                      type: string
                    time:
                      description: time is the timestamp when the error was encountered.
                      format: date-time
                      type: string
                  type: object
                readyToUse:
                  description: readyToUse indicates if a snapshot is ready to be used to restore a volume. In dynamic snapshot creation case, this field will be filled in by the CSI snapshotter sidecar with the "ready_to_use" value returned from CSI "CreateSnapshot" gRPC call. For a pre-existing snapshot, this field will be filled with the "ready_to_use" value returned from the CSI "ListSnapshots" gRPC call if the driver supports it, otherwise, this field will be set to "True". If not specified, it means the readiness of a snapshot is unknown.
                  type: boolean
                restoreSize:
                  description: restoreSize represents the complete size of the snapshot in bytes. In dynamic snapshot creation case, this field will be filled in by the CSI snapshotter sidecar with the "size_bytes" value returned from CSI "CreateSnapshot" gRPC call. For a pre-existing snapshot, this field will be filled with the "size_bytes" value returned from the CSI "ListSnapshots" gRPC call if the driver supports it. When restoring a volume from this snapshot, the size of the volume MUST NOT be smaller than the restoreSize if it is specified, otherwise the restoration will fail. If not specified, it indicates that the size is unknown.
                  format: int64
                  minimum: 0
                  type: integer
                snapshotHandle:
                  description: snapshotHandle is the CSI "snapshot_id" of a snapshot on the underlying storage system. If not specified, it indicates that dynamic snapshot creation has either failed or it is still in progress.
                  type: string
              type: object
          required:
            - spec
          type: object
      served: false
      storage: false
      subresources:
        status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.11.3
    api-approved.kubernetes.io: "https://github.com/kubernetes-csi/external-snapshotter/pull/814"
  creationTimestamp: null
  name: volumesnapshots.snapshot.storage.k8s.io
spec:
  group: snapshot.storage.k8s.io
  names:
    kind: VolumeSnapshot
    listKind: VolumeSnapshotList
    plural: volumesnapshots
    shortNames:
      - vs
    singular: volumesnapshot
  scope: Namespaced
  versions:
    - additionalPrinterColumns:
        - description: Indicates if the snapshot is ready to be used to restore a volume.
          jsonPath: .status.readyToUse
          name: ReadyToUse
          type: boolean
        - description: If a new snapshot needs to be created, this contains the name of
            the source PVC from which this snapshot was (or will be) created.
          jsonPath: .spec.source.persistentVolumeClaimName
          name: SourcePVC
          type: string
        - description: If a snapshot already exists, this contains the name of the existing
            VolumeSnapshotContent object representing the existing snapshot.
          jsonPath: .spec.source.volumeSnapshotContentName
          name: SourceSnapshotContent
          type: string
        - description: Represents the minimum size of volume required to rehydrate from
            this snapshot.
          jsonPath: .status.restoreSize
          name: RestoreSize
          type: string
        - description: The name of the VolumeSnapshotClass requested by the VolumeSnapshot.
          jsonPath: .spec.volumeSnapshotClassName
          name: SnapshotClass
          type: string
        - description: Name of the VolumeSnapshotContent object to which the VolumeSnapshot
            object intends to bind to. Please note that verification of binding actually
            requires checking both VolumeSnapshot and VolumeSnapshotContent to ensure
            both are pointing at each other. Binding MUST be verified prior to usage of
            this object.
          jsonPath: .status.boundVolumeSnapshotContentName
          name: SnapshotContent
          type: string
        - description: Timestamp when the point-in-time snapshot was taken by the underlying
            storage system.
          jsonPath: .status.creationTime
          name: CreationTime
          type: date
        - jsonPath: .metadata.creationTimestamp
          name: Age
          type: date
      name: v1
      schema:
        openAPIV3Schema:
          description: VolumeSnapshot is a user's request for either creating a point-in-time
            snapshot of a persistent volume, or binding to a pre-existing snapshot.
          properties:
            apiVersion:
              description: 'APIVersion defines the versioned schema of this representation
                of an object. Servers should convert recognized schemas to the latest
                internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
              type: string
            kind:
              description: 'Kind is a string value representing the REST resource this
                object represents. Servers may infer this from the endpoint the client
                submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
              type: string
            spec:
              description: 'spec defines the desired characteristics of a snapshot requested
                by a user. More info: https://kubernetes.io/docs/concepts/storage/volume-snapshots#volumesnapshots
                Required.'
              properties:
                source:
                  description: source specifies where a snapshot will be created from.
                    This field is immutable after creation. Required.
                  properties:
                    persistentVolumeClaimName:
                      description: persistentVolumeClaimName specifies the name of the
                        PersistentVolumeClaim object representing the volume from which
                        a snapshot should be created. This PVC is assumed to be in the
                        same namespace as the VolumeSnapshot object. This field should
                        be set if the snapshot does not exists, and needs to be created.
                        This field is immutable.
                      type: string
                    volumeSnapshotContentName:
                      description: volumeSnapshotContentName specifies the name of a
                        pre-existing VolumeSnapshotContent object representing an existing
                        volume snapshot. This field should be set if the snapshot already
                        exists and only needs a representation in Kubernetes. This field
                        is immutable.
                      type: string
                  type: object
                  oneOf:
                    - required: ["persistentVolumeClaimName"]
                    - required: ["volumeSnapshotContentName"]
                volumeSnapshotClassName:
                  description: 'VolumeSnapshotClassName is the name of the VolumeSnapshotClass
                    requested by the VolumeSnapshot. VolumeSnapshotClassName may be
                    left nil to indicate that the default SnapshotClass should be used.
                    A given cluster may have multiple default Volume SnapshotClasses:
                    one default per CSI Driver. If a VolumeSnapshot does not specify
                    a SnapshotClass, VolumeSnapshotSource will be checked to figure
                    out what the associated CSI Driver is, and the default VolumeSnapshotClass
                    associated with that CSI Driver will be used. If more than one VolumeSnapshotClass
                    exist for a given CSI Driver and more than one have been marked
                    as default, CreateSnapshot will fail and generate an event. Empty
                    string is not allowed for this field.'
                  type: string
              required:
                - source
              type: object
            status:
              description: status represents the current information of a snapshot.
                Consumers must verify binding between VolumeSnapshot and VolumeSnapshotContent
                objects is successful (by validating that both VolumeSnapshot and VolumeSnapshotContent
                point at each other) before using this object.
              properties:
                boundVolumeSnapshotContentName:
                  description: 'boundVolumeSnapshotContentName is the name of the VolumeSnapshotContent
                    object to which this VolumeSnapshot object intends to bind to. If
                    not specified, it indicates that the VolumeSnapshot object has not
                    been successfully bound to a VolumeSnapshotContent object yet. NOTE:
                    To avoid possible security issues, consumers must verify binding
                    between VolumeSnapshot and VolumeSnapshotContent objects is successful
                    (by validating that both VolumeSnapshot and VolumeSnapshotContent
                    point at each other) before using this object.'
                  type: string
                creationTime:
                  description: creationTime is the timestamp when the point-in-time
                    snapshot is taken by the underlying storage system. In dynamic snapshot
                    creation case, this field will be filled in by the snapshot controller
                    with the "creation_time" value returned from CSI "CreateSnapshot"
                    gRPC call. For a pre-existing snapshot, this field will be filled
                    with the "creation_time" value returned from the CSI "ListSnapshots"
                    gRPC call if the driver supports it. If not specified, it may indicate
                    that the creation time of the snapshot is unknown.
                  format: date-time
                  type: string
                error:
                  description: error is the last observed error during snapshot creation,
                    if any. This field could be helpful to upper level controllers(i.e.,
                    application controller) to decide whether they should continue on
                    waiting for the snapshot to be created based on the type of error
                    reported. The snapshot controller will keep retrying when an error
                    occurs during the snapshot creation. Upon success, this error field
                    will be cleared.
                  properties:
                    message:
                      description: 'message is a string detailing the encountered error
                        during snapshot creation if specified. NOTE: message may be
                        logged, and it should not contain sensitive information.'
                      type: string
                    time:
                      description: time is the timestamp when the error was encountered.
                      format: date-time
                      type: string
                  type: object
                readyToUse:
                  description: readyToUse indicates if the snapshot is ready to be used
                    to restore a volume. In dynamic snapshot creation case, this field
                    will be filled in by the snapshot controller with the "ready_to_use"
                    value returned from CSI "CreateSnapshot" gRPC call. For a pre-existing
                    snapshot, this field will be filled with the "ready_to_use" value
                    returned from the CSI "ListSnapshots" gRPC call if the driver supports
                    it, otherwise, this field will be set to "True". If not specified,
                    it means the readiness of a snapshot is unknown.
                  type: boolean
                restoreSize:
                  type: string
                  description: restoreSize represents the minimum size of volume required
                    to create a volume from this snapshot. In dynamic snapshot creation
                    case, this field will be filled in by the snapshot controller with
                    the "size_bytes" value returned from CSI "CreateSnapshot" gRPC call.
                    For a pre-existing snapshot, this field will be filled with the
                    "size_bytes" value returned from the CSI "ListSnapshots" gRPC call
                    if the driver supports it. When restoring a volume from this snapshot,
                    the size of the volume MUST NOT be smaller than the restoreSize
                    if it is specified, otherwise the restoration will fail. If not
                    specified, it indicates that the size is unknown.
                  pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                  x-kubernetes-int-or-string: true
                volumeGroupSnapshotName:
                  description: VolumeGroupSnapshotName is the name of the VolumeGroupSnapshot
                    of which this VolumeSnapshot is a part of.
                  type: string
              type: object
          required:
            - spec
          type: object
      served: true
      storage: true
      subresources:
        status: {}
    - additionalPrinterColumns:
        - description: Indicates if the snapshot is ready to be used to restore a volume.
          jsonPath: .status.readyToUse
          name: ReadyToUse
          type: boolean
        - description: If a new snapshot needs to be created, this contains the name of the source PVC from which this snapshot was (or will be) created.
          jsonPath: .spec.source.persistentVolumeClaimName
          name: SourcePVC
          type: string
        - description: If a snapshot already exists, this contains the name of the existing VolumeSnapshotContent object representing the existing snapshot.
          jsonPath: .spec.source.volumeSnapshotContentName
          name: SourceSnapshotContent
          type: string
        - description: Represents the minimum size of volume required to rehydrate from this snapshot.
          jsonPath: .status.restoreSize
          name: RestoreSize
          type: string
        - description: The name of the VolumeSnapshotClass requested by the VolumeSnapshot.
          jsonPath: .spec.volumeSnapshotClassName
          name: SnapshotClass
          type: string
        - description: Name of the VolumeSnapshotContent object to which the VolumeSnapshot object intends to bind to. Please note that verification of binding actually requires checking both VolumeSnapshot and VolumeSnapshotContent to ensure both are pointing at each other. Binding MUST be verified prior to usage of this object.
          jsonPath: .status.boundVolumeSnapshotContentName
          name: SnapshotContent
          type: string
        - description: Timestamp when the point-in-time snapshot was taken by the underlying storage system.
          jsonPath: .status.creationTime
          name: CreationTime
          type: date
        - jsonPath: .metadata.creationTimestamp
          name: Age
          type: date
      name: v1beta1
      # This indicates the v1beta1 version of the custom resource is deprecated.
      # API requests to this version receive a warning in the server response.
      deprecated: true
      # This overrides the default warning returned to clients making v1beta1 API requests.
      deprecationWarning: "snapshot.storage.k8s.io/v1beta1 VolumeSnapshot is deprecated; use snapshot.storage.k8s.io/v1 VolumeSnapshot"
      schema:
        openAPIV3Schema:
          description: VolumeSnapshot is a user's request for either creating a point-in-time snapshot of a persistent volume, or binding to a pre-existing snapshot.
          properties:
            apiVersion:
              description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
              type: string
            kind:
              description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
              type: string
            spec:
              description: 'spec defines the desired characteristics of a snapshot requested by a user. More info: https://kubernetes.io/docs/concepts/storage/volume-snapshots#volumesnapshots Required.'
              properties:
                source:
                  description: source specifies where a snapshot will be created from. This field is immutable after creation. Required.
                  properties:
                    persistentVolumeClaimName:
                      description: persistentVolumeClaimName specifies the name of the PersistentVolumeClaim object representing the volume from which a snapshot should be created. This PVC is assumed to be in the same namespace as the VolumeSnapshot object. This field should be set if the snapshot does not exists, and needs to be created. This field is immutable.
                      type: string
                    volumeSnapshotContentName:
                      description: volumeSnapshotContentName specifies the name of a pre-existing VolumeSnapshotContent object representing an existing volume snapshot. This field should be set if the snapshot already exists and only needs a representation in Kubernetes. This field is immutable.
                      type: string
                  type: object
                volumeSnapshotClassName:
                  description: 'VolumeSnapshotClassName is the name of the VolumeSnapshotClass requested by the VolumeSnapshot. VolumeSnapshotClassName may be left nil to indicate that the default SnapshotClass should be used. A given cluster may have multiple default Volume SnapshotClasses: one default per CSI Driver. If a VolumeSnapshot does not specify a SnapshotClass, VolumeSnapshotSource will be checked to figure out what the associated CSI Driver is, and the default VolumeSnapshotClass associated with that CSI Driver will be used. If more than one VolumeSnapshotClass exist for a given CSI Driver and more than one have been marked as default, CreateSnapshot will fail and generate an event. Empty string is not allowed for this field.'
                  type: string
              required:
                - source
              type: object
            status:
              description: status represents the current information of a snapshot. Consumers must verify binding between VolumeSnapshot and VolumeSnapshotContent objects is successful (by validating that both VolumeSnapshot and VolumeSnapshotContent point at each other) before using this object.
              properties:
                boundVolumeSnapshotContentName:
                  description: 'boundVolumeSnapshotContentName is the name of the VolumeSnapshotContent object to which this VolumeSnapshot object intends to bind to. If not specified, it indicates that the VolumeSnapshot object has not been successfully bound to a VolumeSnapshotContent object yet. NOTE: To avoid possible security issues, consumers must verify binding between VolumeSnapshot and VolumeSnapshotContent objects is successful (by validating that both VolumeSnapshot and VolumeSnapshotContent point at each other) before using this object.'
                  type: string
                creationTime:
                  description: creationTime is the timestamp when the point-in-time snapshot is taken by the underlying storage system. In dynamic snapshot creation case, this field will be filled in by the snapshot controller with the "creation_time" value returned from CSI "CreateSnapshot" gRPC call. For a pre-existing snapshot, this field will be filled with the "creation_time" value returned from the CSI "ListSnapshots" gRPC call if the driver supports it. If not specified, it may indicate that the creation time of the snapshot is unknown.
                  format: date-time
                  type: string
                error:
                  description: error is the last observed error during snapshot creation, if any. This field could be helpful to upper level controllers(i.e., application controller) to decide whether they should continue on waiting for the snapshot to be created based on the type of error reported. The snapshot controller will keep retrying when an error occurs during the snapshot creation. Upon success, this error field will be cleared.
                  properties:
                    message:
                      description: 'message is a string detailing the encountered error during snapshot creation if specified. NOTE: message may be logged, and it should not contain sensitive information.'
                      type: string
                    time:
                      description: time is the timestamp when the error was encountered.
                      format: date-time
                      type: string
                  type: object
                readyToUse:
                  description: readyToUse indicates if the snapshot is ready to be used to restore a volume. In dynamic snapshot creation case, this field will be filled in by the snapshot controller with the "ready_to_use" value returned from CSI "CreateSnapshot" gRPC call. For a pre-existing snapshot, this field will be filled with the "ready_to_use" value returned from the CSI "ListSnapshots" gRPC call if the driver supports it, otherwise, this field will be set to "True". If not specified, it means the readiness of a snapshot is unknown.
                  type: boolean
                restoreSize:
                  type: string
                  description: restoreSize represents the minimum size of volume required to create a volume from this snapshot. In dynamic snapshot creation case, this field will be filled in by the snapshot controller with the "size_bytes" value returned from CSI "CreateSnapshot" gRPC call. For a pre-existing snapshot, this field will be filled with the "size_bytes" value returned from the CSI "ListSnapshots" gRPC call if the driver supports it. When restoring a volume from this snapshot, the size of the volume MUST NOT be smaller than the restoreSize if it is specified, otherwise the restoration will fail. If not specified, it indicates that the size is unknown.
                  pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                  x-kubernetes-int-or-string: true
              type: object
          required:
            - spec
          type: object
      served: false
      storage: false
      subresources:
        status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
---

##############################################
###########                       ############
###########   Controller plugin   ############
###########                       ############
##############################################

kind: ServiceAccount
apiVersion: v1
metadata:
  name: openebs-lvm-controller-sa
  namespace: kube-system

---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: openebs-lvm-provisioner-role
rules:
  - apiGroups: [""]
    resources: ["namespaces"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["persistentvolumes", "services"]
    verbs: ["get", "list", "watch", "create", "delete", "update", "patch"]
  - apiGroups: [""]
    resources: ["persistentvolumeclaims"]
    verbs: ["get", "list", "watch", "update"]
  - apiGroups: [""]
    resources: ["persistentvolumeclaims/status"]
    verbs: ["update", "patch"]
  - apiGroups: ["storage.k8s.io"]
    resources: ["storageclasses", "csinodes"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [ "storage.k8s.io" ]
    resources: [ "csistoragecapacities"]
    verbs: ["*"]
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["list", "watch", "create", "update", "patch"]
  - apiGroups: ["coordination.k8s.io"]
    resources: ["leases"]
    verbs: ["get", "watch", "list", "delete", "update", "create"]
  - apiGroups: [""]
    resources: ["nodes"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["pods"]
    verbs: ["get", "list", "watch", "update", "patch"]
  - apiGroups: ["local.openebs.io"]
    resources: ["lvmvolumes", "lvmsnapshots", "lvmnodes"]
    verbs: ["*"]
---

kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: openebs-lvm-provisioner-binding
subjects:
  - kind: ServiceAccount
    name: openebs-lvm-controller-sa
    namespace: kube-system
roleRef:
  kind: ClusterRole
  name: openebs-lvm-provisioner-role
  apiGroup: rbac.authorization.k8s.io

---
apiVersion: scheduling.k8s.io/v1
kind: PriorityClass
metadata:
  name: openebs-lvm-localpv-csi-controller-critical
# A PriorityClass object can have any 32-bit integer value smaller than or equal
# to 1 billion. Larger numbers are reserved for critical system Pods that should
# not normally be preempted or evicted. The higher the value, the higher the priority.
value: 900000000
globalDefault: false
description: "This priority class should be used for the OpenEBS LVM localPV CSI driver controller deployment only."

---

kind: Deployment
apiVersion: apps/v1
metadata:
  name: openebs-lvm-controller
  namespace: kube-system
  labels:
    openebs.io/component-name: openebs-lvm-controller
    openebs.io/version: ci
spec:
  selector:
    matchLabels:
      app: openebs-lvm-controller
      role: openebs-lvm
  replicas: 1
  template:
    metadata:
      labels:
        app: openebs-lvm-controller
        role: openebs-lvm
        openebs.io/component-name: openebs-lvm-controller
        openebs.io/version: ci
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - openebs-lvm-controller
            topologyKey: "kubernetes.io/hostname"
      priorityClassName: openebs-lvm-localpv-csi-controller-critical
      serviceAccountName: openebs-lvm-controller-sa
      containers:
        - name: csi-resizer
          image: registry.k8s.io/sig-storage/csi-resizer:v1.8.0
          args:
            - "--v=5"
            - "--csi-address=$(ADDRESS)"
            - "--leader-election"
          env:
            - name: ADDRESS
              value: /var/lib/csi/sockets/pluginproxy/csi.sock
          imagePullPolicy: IfNotPresent
          volumeMounts:
            - name: socket-dir
              mountPath: /var/lib/csi/sockets/pluginproxy/
        - name: csi-snapshotter
          image: registry.k8s.io/sig-storage/csi-snapshotter:v6.2.2
          imagePullPolicy: IfNotPresent
          args:
            - "--csi-address=$(ADDRESS)"
            - "--leader-election"
          env:
            - name: ADDRESS
              value: /var/lib/csi/sockets/pluginproxy/csi.sock
          volumeMounts:
            - name: socket-dir
              mountPath: /var/lib/csi/sockets/pluginproxy/
        - name: snapshot-controller
          image: registry.k8s.io/sig-storage/snapshot-controller:v6.2.2
          args:
            - "--v=5"
            - "--leader-election=true"
          imagePullPolicy: IfNotPresent
        - name: csi-provisioner
          image: registry.k8s.io/sig-storage/csi-provisioner:v3.5.0
          imagePullPolicy: IfNotPresent
          args:
            - "--csi-address=$(ADDRESS)"
            - "--v=5"
            - "--feature-gates=Topology=true"
            - "--strict-topology"
            - "--leader-election"
            - "--extra-create-metadata=true"
            - "--enable-capacity=true"
            - "--default-fstype=ext4"
          env:
            - name: ADDRESS
              value: /var/lib/csi/sockets/pluginproxy/csi.sock
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
          volumeMounts:
            - name: socket-dir
              mountPath: /var/lib/csi/sockets/pluginproxy/
        - name: openebs-lvm-plugin
          image: openebs/lvm-driver:ci
          imagePullPolicy: IfNotPresent
          env:
            - name: OPENEBS_CONTROLLER_DRIVER
              value: controller
            - name: OPENEBS_CSI_ENDPOINT
              value: unix:///var/lib/csi/sockets/pluginproxy/csi.sock
            - name: LVM_NAMESPACE
              value: openebs
            - name: OPENEBS_IO_INSTALLER_TYPE
              value: "lvm-operator"
            - name: OPENEBS_IO_ENABLE_ANALYTICS
              value: "true"
          args :
            - "--endpoint=$(OPENEBS_CSI_ENDPOINT)"
            - "--plugin=$(OPENEBS_CONTROLLER_DRIVER)"
          volumeMounts:
            - name: socket-dir
              mountPath: /var/lib/csi/sockets/pluginproxy/
      volumes:
        - name: socket-dir
          emptyDir: {}
---

kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: openebs-lvm-snapshotter-role
rules:
  - apiGroups: [""]
    resources: ["persistentvolumes"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["persistentvolumeclaims"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["storage.k8s.io"]
    resources: ["storageclasses"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["list", "watch", "create", "update", "patch"]
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get", "list"]
  - apiGroups: ["snapshot.storage.k8s.io"]
    resources: ["volumesnapshotclasses"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["snapshot.storage.k8s.io"]
    resources: ["volumesnapshotcontents"]
    verbs: ["create", "get", "list", "watch", "update", "delete", "patch"]
  - apiGroups: ["snapshot.storage.k8s.io"]
    resources: ["volumesnapshots"]
    verbs: ["get", "list", "watch", "update", "patch"]
  - apiGroups: ["snapshot.storage.k8s.io"]
    resources: ["volumesnapshotcontents/status"]
    verbs: ["update"]
  - apiGroups: ["snapshot.storage.k8s.io"]
    resources: ["volumesnapshots/status"]
    verbs: ["update"]
  - apiGroups: ["apiextensions.k8s.io"]
    resources: ["customresourcedefinitions"]
    verbs: ["create", "list", "watch", "delete"]

---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: openebs-lvm-snapshotter-binding
subjects:
  - kind: ServiceAccount
    name: openebs-lvm-controller-sa
    namespace: kube-system
roleRef:
  kind: ClusterRole
  name: openebs-lvm-snapshotter-role
  apiGroup: rbac.authorization.k8s.io

---

########################################
###########                 ############
###########   Node plugin   ############
###########                 ############
########################################

apiVersion: v1
kind: ServiceAccount
metadata:
  name: openebs-lvm-node-sa
  namespace: kube-system

---

kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: openebs-lvm-driver-registrar-role
rules:
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["get", "list", "watch", "create", "update", "patch"]
  - apiGroups: [""]
    resources: ["persistentvolumes", "nodes", "services"]
    verbs: ["get", "list"]
  - apiGroups: ["local.openebs.io"]
    resources: ["lvmvolumes", "lvmsnapshots", "lvmnodes"]
    verbs: ["get", "list", "watch", "create", "update", "patch"]

---

kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: openebs-lvm-driver-registrar-binding
subjects:
  - kind: ServiceAccount
    name: openebs-lvm-node-sa
    namespace: kube-system
roleRef:
  kind: ClusterRole
  name: openebs-lvm-driver-registrar-role
  apiGroup: rbac.authorization.k8s.io

---

apiVersion: scheduling.k8s.io/v1
kind: PriorityClass
metadata:
  name: openebs-lvm-localpv-csi-node-critical
# A PriorityClass object can have any 32-bit integer value smaller than or equal
# to 1 billion. Larger numbers are reserved for critical system Pods that should
# not normally be preempted or evicted. The higher the value, the higher the priority.
value: 900001000
globalDefault: false
description: "This priority class should be used for the OpenEBS LVM localPV CSI driver node deployment only."
---

kind: DaemonSet
apiVersion: apps/v1
metadata:
  name: openebs-lvm-node
  namespace: kube-system
  labels:
    openebs.io/component-name: openebs-lvm-node
    openebs.io/version: ci
spec:
  selector:
    matchLabels:
      app: openebs-lvm-node
  updateStrategy:
    rollingUpdate:
      maxUnavailable: 100%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: openebs-lvm-node
        role: openebs-lvm
        openebs.io/component-name: openebs-lvm-node
        openebs.io/version: ci
    spec:
      priorityClassName: openebs-lvm-localpv-csi-node-critical
      serviceAccountName: openebs-lvm-node-sa
      containers:
        - name: csi-node-driver-registrar
          image: registry.k8s.io/sig-storage/csi-node-driver-registrar:v2.8.0
          imagePullPolicy: IfNotPresent
          args:
            - "--v=5"
            - "--csi-address=$(ADDRESS)"
            - "--kubelet-registration-path=$(DRIVER_REG_SOCK_PATH)"
          lifecycle:
            preStop:
              exec:
                command: ["/bin/sh", "-c", "rm -rf /registration/lvm-localpv /registration/lvm-localpv-reg.sock"]
          env:
            - name: ADDRESS
              value: /plugin/csi.sock
            - name: DRIVER_REG_SOCK_PATH
              value: /var/lib/kubelet/plugins/lvm-localpv/csi.sock
            - name: KUBE_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: NODE_DRIVER
              value: openebs-lvm
          volumeMounts:
            - name: plugin-dir
              mountPath: /plugin
            - name: registration-dir
              mountPath: /registration
        - name: openebs-lvm-plugin
          securityContext:
            privileged: true
            allowPrivilegeEscalation: true
          image: openebs/lvm-driver:ci
          imagePullPolicy: IfNotPresent
          args:
            - "--nodeid=$(OPENEBS_NODE_ID)"
            - "--endpoint=$(OPENEBS_CSI_ENDPOINT)"
            - "--plugin=$(OPENEBS_NODE_DRIVER)"
            - "--listen-address=$(METRICS_LISTEN_ADDRESS)"
          env:
            - name: OPENEBS_NODE_ID
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: OPENEBS_CSI_ENDPOINT
              value: unix:///plugin/csi.sock
            - name: OPENEBS_NODE_DRIVER
              value: agent
            - name: LVM_NAMESPACE
              value: openebs
            - name: METRICS_LISTEN_ADDRESS
              value: :9500
            - name: ALLOWED_TOPOLOGIES
              value: "kubernetes.io/hostname,"
          volumeMounts:
            - name: plugin-dir
              mountPath: /plugin
            - name: device-dir
              mountPath: /dev
            - name: pods-mount-dir
              mountPath: /var/lib/kubelet/
              # needed so that any mounts setup inside this container are
              # propagated back to the host machine.
              mountPropagation: "Bidirectional"
      volumes:
        - name: device-dir
          hostPath:
            path: /dev
            type: Directory
        - name: registration-dir
          hostPath:
            path: /var/lib/kubelet/plugins_registry/
            type: DirectoryOrCreate
        - name: plugin-dir
          hostPath:
            path: /var/lib/kubelet/plugins/lvm-localpv/
            type: DirectoryOrCreate
        - name: pods-mount-dir
          hostPath:
            path: /var/lib/kubelet/
            type: Directory
---

apiVersion: v1
kind: Service
metadata:
  name: openebs-lvm-node-service
  namespace: kube-system
  labels:
    name: openebs-lvm-node
spec:
  clusterIP: None
  ports:
    - name: metrics
      port: 9500
      targetPort: 9500
  selector:
    app: openebs-lvm-node
